if (typeof document !== 'undefined') {
  document.addEventListener("DOMContentLoaded", function () {
    const promptArea = document.getElementById("prompt");
    const sendButton = document.getElementById("sendButton");
    const chatBox = document.getElementById("chat-box");
    const fileInput = document.getElementById("fileInput");
    const uploadButton = document.getElementById("uploadButton");
    const attachmentsPreview = document.getElementById("attachmentsPreview");
    const modelSelect = document.getElementById('modelSelect');

    let pendingAttachments = [];
    let isSending = false;

    const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 –ú–ë
    const MAX_FILE_SIZE_MB = MAX_FILE_SIZE / (1024 * 1024);

    const currentModel = {
        name: modelSelect.value,
        supportsImages: modelSelect.value.toLowerCase().includes('llava')
    };

    // –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    let lastRequest = null;

    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ DOMContentLoaded
    let isAutoScrollEnabled = true;
    const autoScrollButton = document.createElement('button');
    autoScrollButton.className = 'auto-scroll-button';
    autoScrollButton.innerHTML = '‚¨á';
    autoScrollButton.title = '–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑';
    document.querySelector('.chat-box').appendChild(autoScrollButton);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    let scrollTimeout;
    let lastScrollPosition = 0;

    chatBox.addEventListener('scroll', () => {
        const currentScrollPosition = chatBox.scrollTop;
        const isScrolledToBottom = Math.abs(chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight) < 50;
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É isProcessingScroll –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        clearTimeout(scrollTimeout);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤–≤–µ—Ä—Ö –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 100px –æ—Ç –Ω–∏–∑–∞
        if (!isScrolledToBottom && (chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight) > 100) {
            isAutoScrollEnabled = false;
            autoScrollButton.style.display = 'flex';
            autoScrollButton.classList.add('show');
        } else if (isScrolledToBottom) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤ —Å–∞–º—ã–π –Ω–∏–∑
            isAutoScrollEnabled = true;
            autoScrollButton.style.display = 'none';
            autoScrollButton.classList.remove('show');
        }
        
        lastScrollPosition = currentScrollPosition;
        
        scrollTimeout = setTimeout(() => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const finalPosition = chatBox.scrollTop;
            const finalScrolledToBottom = Math.abs(chatBox.scrollHeight - finalPosition - chatBox.clientHeight) < 50;
            
            if (finalScrolledToBottom) {
                isAutoScrollEnabled = true;
                autoScrollButton.style.display = 'none';
                autoScrollButton.classList.remove('show');
            }
        }, 100); // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    autoScrollButton.addEventListener('click', () => {
        isAutoScrollEnabled = true; // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        chatBox.scrollTop = chatBox.scrollHeight; // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        autoScrollButton.style.display = 'none';
        autoScrollButton.classList.remove('show');
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateSendButtonState
    function updateSendButtonState() {
        const hasText = promptArea.value.trim().length > 0;
        const isModelSelected = modelSelect.value && modelSelect.value !== '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...';
        
        // –£–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª—å –∏ –Ω–µ –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞
        sendButton.disabled = !isModelSelected || isSending;
        sendButton.classList.toggle('disabled', sendButton.disabled);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    promptArea.addEventListener("input", function () {
      this.style.height = "auto";
      this.style.height = this.scrollHeight + "px";
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ (Ctrl+V) –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π/—Ñ–∞–π–ª–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    promptArea.addEventListener("paste", function (e) {
      const items = e.clipboardData && e.clipboardData.items;
      if (items) {
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          if (item.kind === "file") {
            const file = item.getAsFile();
            if (file) {
              uploadFile(file);
            }
            e.preventDefault();
          }
        }
      }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter (–±–µ–∑ Shift)
    promptArea.addEventListener("keypress", function (e) {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    sendButton.addEventListener("click", sendMessage);

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ drag and drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    document.addEventListener("dragover", function (e) {
      e.preventDefault();
    });

    document.addEventListener("drop", function (e) {
      e.preventDefault();
      if (e.dataTransfer && e.dataTransfer.files) {
        for (let i = 0; i < e.dataTransfer.files.length; i++) {
          uploadFile(e.dataTransfer.files[i]);
        }
      }
    });

    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataURL (base64) –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    function readFileAsDataURL(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞."));
        reader.readAsDataURL(file);
      });
    }

    // –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    function readFileAsText(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞."));
        reader.readAsText(file);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    function isImage(att) {
      if (att.type) {
        return att.type.startsWith("image/");
      } else {
        const imageExtensions = [".jpg", ".jpeg", ".png", ".gif"];
        const lower = att.fileName.toLowerCase();
        return imageExtensions.some(ext => lower.endsWith(ext));
      }
    }

    // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π
    function renderAttachmentsPreview() {
        attachmentsPreview.innerHTML = '';
        
        if (pendingAttachments.length > 0) {
            attachmentsPreview.classList.add('has-files');
            
            pendingAttachments.forEach((att, index) => {
                const fileCard = document.createElement('div');
                fileCard.className = 'file-card';
                fileCard.innerHTML = `
                    <div class="file-content">
                        <div class="file-icon">${getFileIcon(att.fileName)}</div>
                        <div class="file-info">
                            <div class="file-name">${att.fileName}</div>
                            <div class="file-size">${formatFileSize(att.size)}</div>
                        </div>
                    </div>
                    <button class="delete-btn" data-index="${index}">&times;</button>
                `;
                attachmentsPreview.appendChild(fileCard);
            });
        } else {
            attachmentsPreview.classList.remove('has-files');
        }
    }

    function getFileIcon(filename) {
        const ext = filename.split('.').pop().toLowerCase();
        const icons = {
            txt: 'üìÑ',
            docx: 'üóÇÔ∏è',
            xlsx: 'üóÉÔ∏è',
            pdf: 'üìë',
            json: 'üîñ'
        };
        return icons[ext] || 'üìÅ';
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    function formatFileSize(bytes) {
        if (bytes >= 1024 * 1024) return `${(bytes/(1024*1024)).toFixed(1)} MB`;
        if (bytes >= 1024) return `${(bytes/1024).toFixed(0)} KB`;
        return `${bytes} B`;
    }

    function getFileType(filename) {
        return ''; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    }

    function removeAttachment(index) {
      pendingAttachments.splice(index, 1);
      renderAttachmentsPreview();
    }

    // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    async function uploadFile(file) {
      try {
        const allowedTypes = [
            'text/plain',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 
            'application/json'
        ];
        
        if (!allowedTypes.includes(file.type)) {
            alert('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);
        
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        if (!response.ok) throw new Error(result.error);

        const contentResponse = await fetch(result.url);
        const content = await contentResponse.text();

        const existingIndex = pendingAttachments.findIndex(a => a.fileName === file.name);
        if (existingIndex === -1) {
            pendingAttachments.push({
                type: 'text',
                fileName: file.name,
                content: content,
                size: file.size,
                tooLarge: file.size > MAX_FILE_SIZE,
                sent: false
            });
        } else {
            pendingAttachments[existingIndex] = {
                ...pendingAttachments[existingIndex],
                content: content
            };
        }
        
        renderAttachmentsPreview();
        updateSendButtonState();
        
      } catch (error) {
        alert(error.message);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    async function sendMessage() {
      if (isSending || sendButton.disabled) return;
      
      const promptText = promptArea.value.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
      if (!promptText && pendingAttachments.length === 0) {
          alert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª');
          return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
      lastRequest = {
          text: promptText,
          attachments: [...pendingAttachments],
          model: document.getElementById('modelSelect').value
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (pendingAttachments.length > 0) {
          const hasLargeFiles = pendingAttachments.some(att => att.tooLarge);
          if (hasLargeFiles) {
              alert('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä');
              return;
          }
      }
      
      isSending = true;
      sendButton.classList.add("disabled");
      updateSendButtonState();

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –≤–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const attachments = [...pendingAttachments];
      pendingAttachments.length = 0;
      renderAttachmentsPreview();
      updateSendButtonState();

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageContainer = document.createElement('div');
      messageContainer.className = 'message user-message';

      // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
      if (attachments.length > 0) {
          const filesContainer = document.createElement('div');
          filesContainer.className = 'files-container';
          
          attachments.forEach(file => {
              const fileElement = document.createElement('div');
              fileElement.className = 'file-preview';
              fileElement.innerHTML = `
                  <div class="file-content">
                      <div class="file-icon">${getFileIcon(file.fileName)}</div>
                      <div class="file-info">
                          <div class="file-name">${file.fileName}</div>
                          <div class="file-size">${formatFileSize(file.size)}</div>
                      </div>
                  </div>
              `;
              filesContainer.appendChild(fileElement);
          });
          messageContent.appendChild(filesContainer);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
      if (promptText) {
          const textElement = document.createElement('div');
          textElement.className = 'message-text';
          textElement.textContent = promptText;
          messageContent.appendChild(textElement);
      }

      messageContainer.appendChild(messageContent);
      chatBox.appendChild(messageContainer);

      // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      promptArea.value = '';
      pendingAttachments = [];
      renderAttachmentsPreview();
      updateSendButtonState();

      // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
      const assistantContainer = document.createElement("div");
      assistantContainer.className = "assistant-message-container";
      assistantContainer.style.marginLeft = '0';
      assistantContainer.style.marginRight = 'auto';
      assistantContainer.style.alignItems = 'flex-start';
      chatBox.appendChild(assistantContainer);

      const assistantDiv = document.createElement("div");
      assistantDiv.className = "assistant-message";
      assistantDiv.innerHTML = `
          <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</div>
          </div>
      `;
      assistantContainer.appendChild(assistantDiv);
      scrollToBottom();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const content = {
          question: promptText,
          files: attachments.map(file => ({
              fileName: file.fileName,
              content: file.content
          }))
      };

      try {
          // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
          const model = document.getElementById('modelSelect').value;
          if (!model || model === '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...') {
              throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞');
          }

          // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
          await generateResponse(content, assistantContainer, assistantDiv, model);
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
          assistantDiv.innerHTML = `
              <div class="error-message">
                  ${error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}
                  <button class="retry-button">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
              </div>
          `;
      } finally {
          isSending = false;
          sendButton.classList.remove("disabled");
          updateSendButtonState();
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    async function generateResponse(content, assistantContainer, assistantDiv, model) {
      let answer = "";
      let thinkText = "";
      let isThinking = false;
      let discussionDiv;
      let aiResponseDiv;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∞
      window.lastRequest = {content, model};

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π assistantDiv
      assistantDiv.remove();

      // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingDiv = document.createElement("div");
      loadingDiv.className = "loading-container";
      loadingDiv.innerHTML = `
          <div class="loading-spinner"></div>
          <div class="loading-text">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</div>
      `;
      assistantContainer.appendChild(loadingDiv);

      function updateDiscussion() {
        if (!discussionDiv && thinkText.trim()) {
          discussionDiv = document.createElement("div");
          discussionDiv.className = "discussion-section";
          discussionDiv.innerHTML = `
              <div class="discussion-header">
                  <span class="toggle-arrow">‚ñº</span>
                  <span>–†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ</span>
              </div>
              <div class="discussion-content"></div>
          `;
          
          assistantContainer.insertBefore(discussionDiv, loadingDiv);

          const header = discussionDiv.querySelector('.discussion-header');
          header.addEventListener('click', function() {
            discussionDiv.classList.toggle('collapsed');
            const arrow = header.querySelector('.toggle-arrow');
            arrow.textContent = discussionDiv.classList.contains('collapsed') ? '‚ñ∂' : '‚ñº';
          });
        }
        
        if (discussionDiv && thinkText.trim()) {
          const contentDiv = discussionDiv.querySelector(".discussion-content");
          contentDiv.textContent = thinkText.trim();
          discussionDiv.style.display = 'block';
        } else if (discussionDiv) {
          discussionDiv.style.display = 'none';
        }
      }

      function updateAIResponse() {
        if (!aiResponseDiv && answer.trim()) {
            aiResponseDiv = document.createElement("div");
            aiResponseDiv.className = "ai-response";
            assistantContainer.appendChild(aiResponseDiv);
            loadingDiv.remove();
        }
        
        if (aiResponseDiv && answer.trim()) {
            const formattedText = answer.trim()
                .replace(/\n\n+/g, '\n\n')
                .split('\n').map(line => {
                    if (line.match(/^[*-]\s/)) {
                        return `<span class="list-item">${line}</span>`;
                    }
                    return line;
                }).join('\n');
            
            aiResponseDiv.innerHTML = formattedText;
            aiResponseDiv.style.display = 'block';
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            if (isAutoScrollEnabled) {
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        } else if (aiResponseDiv) {
            aiResponseDiv.style.display = 'none';
        }
      }

      try {
        if ((!content.question || content.question.trim() === "") && (!content.files || content.files.length === 0)) {
            throw new Error('–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã');
        }

        const response = await fetch('/api/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                sessionId: 'default-session',
                content: content,
                model: model
            })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder("utf-8");

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          const chunk = decoder.decode(value, { stream: true });
          const lines = chunk.split("\n").filter(line => line.trim());

          for (const line of lines) {
            if (line.startsWith("data:")) {
              try {
                const parsed = JSON.parse(line.slice(5));
                if (parsed.content) {
                  let content = parsed.content;
                  if (content.includes("<think>")) {
                    isThinking = true;
                    content = content.replace("<think>", "");
                    thinkText += content;
                    updateDiscussion();
                  } else if (content.includes("</think>")) {
                    isThinking = false;
                    content = content.replace("</think>", "");
                    thinkText += content;
                    updateDiscussion();
                  } else {
                    if (isThinking) {
                      thinkText += content;
                      updateDiscussion();
                    } else {
                      answer += content;
                      updateAIResponse();
                    }
                    scrollToBottom();
                  }
                }
              } catch (parseError) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", parseError);
              }
            }
          }
        }
        if (!answer && !thinkText) {
          assistantDiv.textContent = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞";
        }
      } catch (error) {
        loadingDiv.remove();
        const errorDiv = document.createElement("div");
        errorDiv.className = "error-message";
        errorDiv.innerHTML = `
            ‚ùå –û—à–∏–±–∫–∞: ${error.message}
            <button class="retry-button">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
        `;
        assistantContainer.appendChild(errorDiv);
      } finally {
        isSending = false;
        updateSendButtonState();
        scrollToBottom();
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é scrollToBottom
    function scrollToBottom() {
        if (isAutoScrollEnabled) {
            chatBox.scrollTop = chatBox.scrollHeight;
            lastScrollPosition = chatBox.scrollTop;
            autoScrollButton.style.display = 'none';
            autoScrollButton.classList.remove('show');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-btn')) {
            const index = parseInt(e.target.getAttribute('data-index'));
            if (!isNaN(index) && index >= 0 && index < pendingAttachments.length) {
                pendingAttachments.splice(index, 1);
                renderAttachmentsPreview();
                updateSendButtonState();
            }
        }
    });

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    function selectRandomModel() {
        const options = modelSelect.options;
        const randomIndex = Math.floor(Math.random() * (options.length - 1)) + 1;
        modelSelect.selectedIndex = randomIndex;
        currentModel.name = modelSelect.value;
        updateSendButtonState();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–π –º–æ–¥–µ–ª–∏
    document.getElementById('randomModel').addEventListener('click', selectRandomModel);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    async function loadModels() {
        try {
            const response = await fetch('/api/models');
            if (!response.ok) throw new Error('–°–µ—Ä–≤–µ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            const models = await response.json();
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
            document.querySelectorAll('.model-error').forEach(el => el.remove());
            
            const select = document.getElementById('modelSelect');
            select.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...</option>';
            
            if (models.length === 0) {
                showModelError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                return;
            }
            
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.name;
                option.textContent = model.name;
                select.appendChild(option);
            });

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
            const savedModel = localStorage.getItem('selectedModel');
            if (savedModel && models.some(m => m.name === savedModel)) {
                modelSelect.value = savedModel;
            } else if(models.length > 0) {
                selectRandomModel();
            }
            updateSendButtonState();
        } catch (error) {
            console.error('Error loading models:', error);
            showModelError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: ${error.message}`);
            selectRandomModel(); // –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        }
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    function showModelError(message) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
        document.querySelectorAll('.model-error').forEach(el => el.remove());
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'model-error';
        errorDiv.style.color = '#dc2626';
        errorDiv.style.padding = '10px';
        errorDiv.style.marginBottom = '1rem';
        errorDiv.innerHTML = `‚ùå ${message}`;
        
        const container = document.querySelector('.model-selector');
        container.parentNode.insertBefore(errorDiv, container.nextSibling);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        modelSelect.disabled = true;
        document.getElementById('randomModel').disabled = true;
        sendButton.disabled = true;
    }

    // –í—ã–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadModels();

    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function loadSelectedModel() {
        const savedModel = localStorage.getItem('selectedModel');
        if (savedModel) {
            modelSelect.value = savedModel;
        }
    }

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
    modelSelect.addEventListener('change', () => {
        localStorage.setItem('selectedModel', modelSelect.value);
        updateSendButtonState();
    });

    // –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
    document.addEventListener('click', async function(e) {
        if (e.target.classList.contains('retry-button')) {
            if (!lastRequest) {
                console.error('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞');
                return;
            }

            const assistantContainer = e.target.closest('.assistant-message-container');
            if (!assistantContainer) return;

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            assistantContainer.innerHTML = '';

            // –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingDiv = document.createElement("div");
            loadingDiv.className = "loading-container";
            loadingDiv.innerHTML = `
                <div class="loading-spinner"></div>
                <div class="loading-text">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</div>
            `;
            assistantContainer.appendChild(loadingDiv);

            try {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                const content = {
                    question: lastRequest.text,
                    files: lastRequest.attachments.map(file => ({
                        fileName: file.fileName,
                        content: file.content
                    }))
                };

                await generateResponse(
                    content,
                    assistantContainer,
                    loadingDiv,
                    lastRequest.model
                );
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ:', error);
                assistantContainer.innerHTML = `
                    <div class="error-message">
                        ${error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ'}
                        <button class="retry-button">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                    </div>
                `;
            }
        }
    });

    // –û–±–Ω–æ–≤–∏–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
    const retryButtonStyles = `
    .retry-button {
        background: #4f46e5;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s ease;
        margin-top: 8px;
    }

    .retry-button:hover {
        background: #4338ca;
        transform: translateY(-1px);
    }

    .retry-button:active {
        transform: translateY(0);
    }

    .error-message {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: #fee2e2;
        border: 1px solid #fecaca;
        border-radius: 8px;
        color: #dc2626;
    }
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const styleSheet = document.createElement("style");
    styleSheet.textContent = retryButtonStyles;
    document.head.appendChild(styleSheet);

    // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ input-area
    document.querySelector('.input-area').addEventListener('click', (e) => {
        e.stopPropagation();
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
    uploadButton.addEventListener("click", function() {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        const allowedTypes = ['TXT', 'DOCX', 'XLSX', 'JSON'];
        fileInput.title = `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${allowedTypes.join(', ')}`;
        fileInput.click();
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    fileInput.addEventListener("change", function(e) {
        if (e.target.files) {
            Array.from(e.target.files).forEach(file => {
                uploadFile(file);
            });
        }
        // –û—á–∏—â–∞–µ–º input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ –∂–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ
        e.target.value = '';
    });
  });
} else {
  console.error("–û—à–∏–±–∫–∞: document –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.");
} 